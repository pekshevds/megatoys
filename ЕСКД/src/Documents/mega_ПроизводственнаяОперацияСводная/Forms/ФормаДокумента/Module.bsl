///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	УправлениеДоступностью();
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 		
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;
		
		УстановитьОтборСтрокМатериалы();		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТехнологическиеОперации

&НаКлиенте
Процедура ТехнологическиеОперацииПередУдалением(Элемент, Отказ)
	
	Отказ = Не МожноУдалитьСтрокуТехнологическойОперации();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор();
		ТекущиеДанные.Количество = 1;
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;
	КонецЕсли;
	
	УстановитьОтборСтрокМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;	
	КонецЕсли;
	
	УстановитьОтборСтрокМатериалы();
КонецПроцедуры


&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("ТехнологическаяОперация");
		Структура.Вставить("ТехнологическаяОперацияКоличество");
		Структура.Вставить("ТехнологическаяОперацияЕдиницаИзмерения");
		Структура.Вставить("ТехнологическаяОперацияВремяВыполнения");
		Структура.Вставить("ВидСтадииОбработки");
		Структура.Вставить("Спецификация");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ЗаполнитьДанныеТехнологическойОперацииНаСервере(Структура);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура");
		Структура.Вставить("ЕдиницаИзмерения");
		Структура.Вставить("Спецификация");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ЗаполнитьЕдиницуИзмеренияСпецификациюНаСервере(Структура);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда
			
			Структура = Новый Структура;
			Структура.Вставить("Спецификация");
			Структура.Вставить("ВидСтадииОбработки");
			Структура.Вставить("ПредыдущийВидСтадииОбработки");
			
			ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);			
			ЗаполнитьПредыдущийВидСтадииОбработкиНаСервере(Структура);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("ТехнологическаяОперация");
		Структура.Вставить("ТехнологическаяОперацияКоличество");		
		Структура.Вставить("ТехнологическаяОперацияВремяВыполнения");
		Структура.Вставить("ВидСтадииОбработки");
		Структура.Вставить("Спецификация");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ЗаполнитьВремяВыполненияНаСервере(Структура);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьМатериалы(Команда)

	Если Объект.Материалы.Количество() = 0 Тогда
		
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаООчисткеТаблицыМатериалов", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			
			ТекущиеДанные.КлючСвязи = ТекущаяТехнологическаяОперация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяТехнологическаяОперация) Тогда 
		
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Материалы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура");
		Структура.Вставить("ЕдиницаИзмерения");
		Структура.Вставить("Спецификация");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);		
		ЗаполнитьЕдиницуИзмеренияСпецификациюНаСервере(Структура);		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаООчисткеТаблицыМатериалов(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.Материалы.Очистить();
		
	ЗаполнитьМатериалыПоСпецификацииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМатериалыСпецификаций(Спецификации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МатериалыСпецификаций.Ссылка КАК Спецификация,
		|	МатериалыСпецификаций.Номенклатура КАК Материал,
		|	МатериалыСпецификаций.Количество / МатериалыСпецификаций.Ссылка.Количество КАК Количество,
		|	МатериалыСпецификаций.ЕдиницаИзмерения,
		|	МатериалыСпецификаций.СтадияОбработки,
		|	МатериалыСпецификаций.КлючСвязи
		|ИЗ
		|	Справочник.mega_Спецификации.Материалы КАК МатериалыСпецификаций
		|ГДЕ
		|	МатериалыСпецификаций.Ссылка В (&Спецификации)";
	
	Запрос.УстановитьПараметр("Спецификации", Спецификации);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Возврат ВыборкаДетальныеЗаписи;
КонецФункции

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере()
	
	ТехнологическиеОперации = Объект.ТехнологическиеОперации.Выгрузить();
	ТехнологическиеОперации.Свернуть("Спецификация");
	Спецификации = ТехнологическиеОперации.ВыгрузитьКолонку("Спецификация");
	МатериалыСпецификаций = ПолучитьМатериалыСпецификаций(Спецификации);
	
	
	Для Каждого ТекСтрокаТехнологическиеОперации Из Объект.ТехнологическиеОперации Цикл
		
		Если ЗначениеЗаполнено(ТекСтрокаТехнологическиеОперации.Спецификация) И 
			ЗначениеЗаполнено(ТекСтрокаТехнологическиеОперации.ВидСтадииОбработки) Тогда
			
			СтадияОбработкиПоВидуСтадииОбработки = 
				Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(ТекСтрокаТехнологическиеОперации.Спецификация,
					ТекСтрокаТехнологическиеОперации.ВидСтадииОбработки);
			
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Спецификация", ТекСтрокаТехнологическиеОперации.Спецификация);
			ПараметрыПоиска.Вставить("КлючСвязи", СтадияОбработкиПоВидуСтадииОбработки.КлючСвязи);
			
			МатериалыСпецификаций.Сбросить();
			Пока МатериалыСпецификаций.НайтиСледующий(ПараметрыПоиска) Цикл
				
				НоваяСтрока = Объект.Материалы.Добавить();
				НоваяСтрока.КлючСвязи = ТекСтрокаТехнологическиеОперации.КлючСвязи;
				НоваяСтрока.Номенклатура = МатериалыСпецификаций.Материал;
				НоваяСтрока.ЕдиницаИзмерения = МатериалыСпецификаций.ЕдиницаИзмерения;
				НоваяСтрока.Количество = МатериалыСпецификаций.Количество * ТекСтрокаТехнологическиеОперации.Количество;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеТехнологическойОперацииНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.ТехнологическаяОперация, "ЕдиницаИзмерения");
		
	ЗаполнитьВремяВыполненияНаСервере(Структура);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВремяВыполненияНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияВремяВыполнения = 0;
	
	Если ЗначениеЗаполнено(Структура.Спецификация)
		И ЗначениеЗаполнено(Структура.ВидСтадииОбработки)
		И ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
		
		СтадияОбработкиПоВидуСтадииОбработки = 
			Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(Структура.Спецификация,
				Структура.ВидСтадииОбработки);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	mega_СпецификацииТехнологическиеОперации.Номенклатура,
			|	mega_СпецификацииТехнологическиеОперации.Количество,
			|	mega_СпецификацииТехнологическиеОперации.ЕдиницаИзмерения,
			|	mega_СпецификацииТехнологическиеОперации.ВремяВыполнения
			|ИЗ
			|	Справочник.mega_Спецификации.ТехнологическиеОперации КАК mega_СпецификацииТехнологическиеОперации
			|ГДЕ
			|	mega_СпецификацииТехнологическиеОперации.Номенклатура = &ТехнологическаяОперация
			|	И mega_СпецификацииТехнологическиеОперации.КлючСвязи = &КлючСвязи";
		
		Запрос.УстановитьПараметр("ТехнологическаяОперация", Структура.ТехнологическаяОперация);
		Запрос.УстановитьПараметр("КлючСвязи", СтадияОбработкиПоВидуСтадииОбработки.КлючСвязи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Структура.ТехнологическаяОперацияВремяВыполнения = 
				ВыборкаДетальныеЗаписи.ВремяВыполнения / ВыборкаДетальныеЗаписи.Количество * Структура.ТехнологическаяОперацияКоличество;
		КонецЦикла;				
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЕдиницуИзмеренияСпецификациюНаСервере(Структура)
	
	Структура.Спецификация = Справочники.mega_Спецификации.ПолучитьОсновнуюСпецификациюНоменклатуры(Структура.Номенклатура);
	Структура.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредыдущийВидСтадииОбработкиНаСервере(Структура)
	
	
	СтадияОбработкиПоВидуСтадииОбработки = 
		Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(Структура.Спецификация,
			Структура.ВидСтадииОбработки);
			
	ПредыдущаяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьПредыдущуюСтадиюОбработки(Структура.Спецификация,
			СтадияОбработкиПоВидуСтадииОбработки);	
			
	Структура.ПредыдущийВидСтадииОбработки = ПредыдущаяСтадияОбработки.ВидСтадииОбработки;		
КонецПроцедуры

&НаСервере
Функция МожноУдалитьСтрокуТехнологическойОперации()
	
	Если Не ЗначениеЗаполнено(ТекущаяТехнологическаяОперация) Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Объект.Материалы.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяТехнологическаяОперация)).Количество();
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСтрокМатериалы()
	
	Элементы.Материалы.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущаяТехнологическаяОперация);
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

