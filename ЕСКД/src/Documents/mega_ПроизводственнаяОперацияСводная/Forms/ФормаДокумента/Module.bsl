///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
КонецПроцедуры   

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	УправлениеДоступностью();
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 		
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;
		
		УстановитьОтборСтрокМатериалы();		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТехнологическиеОперации

&НаКлиенте
Процедура ТехнологическиеОперацииПередУдалением(Элемент, Отказ)
	
	Отказ = Не МожноУдалитьСтрокуТехнологическойОперации();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
		ТекущиеДанные.КлючСвязи = Новый УникальныйИдентификатор();
		ТекущиеДанные.Количество = 1;
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;
	КонецЕсли;
	
	УстановитьОтборСтрокМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		
		ТекущаяТехнологическаяОперация = ТекущиеДанные.КлючСвязи;	
	КонецЕсли;
	
	УстановитьОтборСтрокМатериалы();
КонецПроцедуры


&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ПредыдущийВидСтадииОбработки,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество,
		|ТехнологическаяОперацияВремяВыполнения");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииТехнологическойОперацииНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииПредыдущийВидСтадииОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
	
			ВидыСтадийОбработки = Новый СписокЗначений(); 
			ВидыСтадийОбработки.ЗагрузитьЗначения(ПолучитьДоступныеВидыСтадийОбработкиНаСервере(Спецификация));
			ДанныеВыбора = ВидыСтадийОбработки;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ТехнологическиеОперацииНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"Номенклатура,
		|Спецификация,
		|ЕдиницаИзмерения,
		|ВидСтадииОбработки,
		|ПредыдущийВидСтадииОбработки,
		|ТехнологическаяОперация,
		|ТехнологическаяОперацияЕдиницаИзмерения,
		|ТехнологическаяОперацияКоличество,
		|Количество,
		|ТехнологическаяОперацияВремяВыполнения");
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииНоменклатурыНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
		Если ЗначениеЗаполнено(Спецификация) И ЗначениеЗаполнено(ВидСтадииОбработки) Тогда			
			
			ТекущиеДанные.ТехнологическаяОперация = Неопределено;
			
			ТехОперации = ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки);
			Если ТехОперации.Количество() > 0 Тогда
				
				ТекущиеДанные.ТехнологическаяОперация = ТехОперации[0];
			КонецЕсли;
			
			ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Неопределено);
			
			
			Структура = Новый Структура;
			Структура.Вставить("Спецификация");
			Структура.Вставить("ВидСтадииОбработки");
			Структура.Вставить("ПредыдущийВидСтадииОбработки");
			
			ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);			
			ЗаполнитьПредыдущийВидСтадииОбработкиНаСервере(Структура);
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияКоличество,
		|ТехнологическаяОперацияВремяВыполнения");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьМатериалы(Команда)

	Если Объект.МатериалыОпераций.Количество() = 0 Тогда
		
		ЗаполнитьМатериалыПоСпецификацииНаСервере();
	Иначе
		Режим = РежимДиалогаВопрос.ДаНет;
		
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ПослеЗакрытияВопросаООчисткеТаблицыМатериалов", ЭтотОбъект);	
		
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, 
			НСтр("ru = 'Перед заполнением табличная часть будет очищена. Продолжить?';"), Режим, 0);		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыОперацийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элементы.МатериалыОпераций.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда 
			
			ТекущиеДанные.КлючСвязи = ТекущаяТехнологическаяОперация;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыОперацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяТехнологическаяОперация) Тогда 
		
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииТехнологическаяОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
			
			ВидСтадииОбработки = ТекущиеДанные.ВидСтадииОбработки;
			
			ТехОперации = Новый СписокЗначений(); 
			ТехОперации.ЗагрузитьЗначения(
				ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки));
			ДанныеВыбора = ТехОперации;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииВидСтадииОбработкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Спецификация = ТекущиеДанные.Спецификация;
		Если ЗначениеЗаполнено(Спецификация) Тогда			
	
			ВидыСтадийОбработки = Новый СписокЗначений(); 
			ВидыСтадийОбработки.ЗагрузитьЗначения(ПолучитьДоступныеВидыСтадийОбработкиНаСервере(Спецификация));
			ДанныеВыбора = ВидыСтадийОбработки;
			
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТехнологическиеОперацииКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТехнологическиеОперации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Структура = Новый Структура(
		"ТехнологическаяОперация,
		|Спецификация,
		|ВидСтадииОбработки,
		|ТехнологическаяОперацияКоличество,
		|Количество,
		|ТехнологическаяОперацияВремяВыполнения");
		
		ЗаполнитьЗначенияСвойств(Структура, ТекущиеДанные);
		Структура.ТехнологическаяОперацияКоличество = Структура.Количество;
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Структура);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеТехнологическиеОперацииНаСервере(Спецификация, ВидСтадииОбработки)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеТехнологическиеОперации(Спецификация, ВидСтадииОбработки);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеВидыСтадийОбработкиНаСервере(Спецификация)
	Возврат Справочники.mega_Спецификации.ПолучитьДоступныеВидыСтадийОбработки(Спецификация);
КонецФункции

&НаСервереБезКонтекста
Процедура ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияВремяВыполнения = 0;
	
	Если ЗначениеЗаполнено(Структура.Спецификация)
		И ЗначениеЗаполнено(Структура.ВидСтадииОбработки)
		И ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияВремяВыполнения = 
			ПолучитьДлительностьТехнологическойОперацииНаСервере(
				Структура.Спецификация, Структура.ВидСтадииОбработки, Структура.ТехнологическаяОперация) * 
				Структура.ТехнологическаяОперацияКоличество;	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзменениитехнологическойОперацииНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
			
	Если ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
				
		Структура.ТехнологическаяОперацияЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.ТехнологическаяОперация, "ЕдиницаИзмерения");
		Структура.ТехнологическаяОперацияКоличество = Структура.Количество;	
		
		ПриИзмененииТехнологическаяОперацияКоличествоНаСервере(Структура);	
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриИзмененииНоменклатурыНаСервере(Структура)
	
	Структура.ЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.Спецификация = Справочники.mega_Спецификации.ПустаяСсылка();
	Структура.ВидСтадииОбработки = Справочники.mega_ВидыСтадийОбработки.ПустаяСсылка();
	Структура.ПредыдущийВидСтадииОбработки = Справочники.mega_ВидыСтадийОбработки.ПустаяСсылка();
	Структура.ТехнологическаяОперация = Справочники.mega_Номенклатура.ПустаяСсылка();
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = Справочники.mega_ЕдиницыИзмерения.ПустаяСсылка();
	Структура.ТехнологическаяОперацияКоличество = 0;
	Структура.Количество = 0;
	Структура.ТехнологическаяОперацияВремяВыполнения = 0;
		
	Если ЗначениеЗаполнено(Структура.Номенклатура) Тогда
		
		Структура.ЕдиницаИзмерения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.Номенклатура, "ЕдиницаИзмерения");		
		Структура.Спецификация = Справочники.mega_Спецификации.ПолучитьОсновнуюСпецификациюНоменклатуры(Структура.Номенклатура);		
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДлительностьТехнологическойОперацииНаСервере(Спецификация, ВидСтадииОбработки, ТехнологическаяОперация)
    
	Возврат Справочники.mega_Спецификации.ПолучитьДлительностьТехнологическойОперации(
   		Спецификация, ВидСтадииОбработки, ТехнологическаяОперация);   
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаООчисткеТаблицыМатериалов(Результат, Параметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Объект.МатериалыОпераций.Очистить();
		
	ЗаполнитьМатериалыПоСпецификацииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоСпецификацииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
    ДокументОбъект.ЗаполнитьМатериалы();
   	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеТехнологическойОперацииНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияЕдиницаИзмерения = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Структура.ТехнологическаяОперация, "ЕдиницаИзмерения");
		
	ЗаполнитьВремяВыполненияНаСервере(Структура);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВремяВыполненияНаСервере(Структура)
	
	Структура.ТехнологическаяОперацияВремяВыполнения = 0;
	
	Если ЗначениеЗаполнено(Структура.Спецификация)
		И ЗначениеЗаполнено(Структура.ВидСтадииОбработки)
		И ЗначениеЗаполнено(Структура.ТехнологическаяОперация) Тогда
		
		СтадияОбработкиПоВидуСтадииОбработки = 
			Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(Структура.Спецификация,
				Структура.ВидСтадииОбработки);
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	mega_СпецификацииТехнологическиеОперации.Номенклатура,
			|	mega_СпецификацииТехнологическиеОперации.Количество,
			|	mega_СпецификацииТехнологическиеОперации.ЕдиницаИзмерения,
			|	mega_СпецификацииТехнологическиеОперации.ВремяВыполнения
			|ИЗ
			|	Справочник.mega_Спецификации.ТехнологическиеОперации КАК mega_СпецификацииТехнологическиеОперации
			|ГДЕ
			|	mega_СпецификацииТехнологическиеОперации.Номенклатура = &ТехнологическаяОперация
			|	И mega_СпецификацииТехнологическиеОперации.КлючСвязи = &КлючСвязи";
		
		Запрос.УстановитьПараметр("ТехнологическаяОперация", Структура.ТехнологическаяОперация);
		Запрос.УстановитьПараметр("КлючСвязи", СтадияОбработкиПоВидуСтадииОбработки.КлючСвязи);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Структура.ТехнологическаяОперацияВремяВыполнения = 
				ВыборкаДетальныеЗаписи.ВремяВыполнения / ВыборкаДетальныеЗаписи.Количество * Структура.ТехнологическаяОперацияКоличество;
		КонецЦикла;				
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредыдущийВидСтадииОбработкиНаСервере(Структура)
	
	
	СтадияОбработкиПоВидуСтадииОбработки = 
		Справочники.mega_Спецификации.ПолучитьСтадиюОбработкиПоВидуСтадииОбработки(Структура.Спецификация,
			Структура.ВидСтадииОбработки);
			
	ПредыдущаяСтадияОбработки = Справочники.mega_Спецификации.ПолучитьПредыдущуюСтадиюОбработки(Структура.Спецификация,
			СтадияОбработкиПоВидуСтадииОбработки);	
			
	Структура.ПредыдущийВидСтадииОбработки = ПредыдущаяСтадияОбработки.ВидСтадииОбработки;		
КонецПроцедуры

&НаСервере
Функция МожноУдалитьСтрокуТехнологическойОперации()
	
	Если Не ЗначениеЗаполнено(ТекущаяТехнологическаяОперация) Тогда 
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Объект.МатериалыОпераций.НайтиСтроки(Новый Структура("КлючСвязи", ТекущаяТехнологическаяОперация)).Количество() = 0;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборСтрокМатериалы()
	
	Элементы.МатериалыОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущаяТехнологическаяОперация);
КонецПроцедуры

// Управляет доступностью элементов формы.
&НаКлиенте
Процедура УправлениеДоступностью()
	

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

